// COUNT : 統計有幾筆資料
SELECT COUNT(ReportsTo) FROM employees

--> 也統計NULL值
SELECT COUNT(*) FROM employees

// GROUP BY : 以相同的值為分類別(先分區再行動)
SELECT AVG(UnitPrice), CategoryID
FROM products
GROUP BY CategoryID

--> GROUP 過後篩選要用HAVING, 不是WHERE
HAVING AVG(UnitPrice) >= 30
OR
HAVING AvgPrice >= 30  (雖然可以用新名稱，但是還是盡量用舊的)


// ROLLUP : 多層次分析
SELECT * FROM `order details`

SELECT OrderID, ProductID FROM `order details` 
ORDER BY OrderID, ProductID

SELECT OrderID, ProductID, SUM(Quantity) 
FROM `order details` 
Group BY OrderID, ProductID

SELECT OrderID, ProductID, SUM(Quantity)
FROM `order details` 
Group BY OrderID, ProductID with ROLLUP

// JOIN : 結合多個資料表
SELECT X.欄位 Y.欄位, ...
FROM X JOIN Y
ON Y.FK = X.PK


//上課範例
--> 原本
Table1      Table2
⌜      ⌝    ⌜      ⌝
 A   B       A   C 
 ――――――      ――――――
 A1  B1      A1  C1
 A2  B2      A2  C2
 A3  B3      A2  C3
⌞      ⌟    ⌞      ⌟

--> 輸入
SELECT X.A,B,C
FROM Table1 AS X
JOIN Table2 AS Y
ON Y.A = X.A

--> 結果
⌜          ⌝
 A   B   C  
 ――――――――――  
 A1  B1  C1  
 A2  B2  C2  
 A2  B2  C3  
⌞          ⌟ 

筆記 :
1. 在A欄位中有相同值的資料會被放在同一列
2. ON Y.A = X.A 就像是 SELECT * FROM Table1 WHERE A = 'A1' (依此類推)
3. JOIN預設是 inner JOIN 所以當沒有符合時，就不會顯示

--> 輸入
SELECT X.A,B,C
FROM Table1 AS X
left JOIN Table2 AS Y
ON Y.A = X.A

--> 結果
⌜          ⌝
 A   B   C  
 ――――――――――  
 A1  B1  C1  
 A2  B2  C2  
 A2  B2  C3
 A3  B3  NL  
⌞          ⌟ 

筆記 :
left JOIN 會將左表所有的都顯示，不管有沒有符合

// inner JOIN : 預設，不符合不顯示

// outer JOIN : 不符合也顯示
// left JOIN :  針對左表(主要的，以上方來說是Table1)
// right JOIN :  針對右表(次要的，以上方來說是Table2)

// 更多連接
--> 原本
Table1      Table2       Table3
⌜      ⌝    ⌜      ⌝     ⌜      ⌝
 A   B       A   C        D   C
 ――――――      ――――――       ――――――
 A1  B1      A1  C1       D1  C1
 A2  B2      A2  C2       D2  C2
 A3  B3      A2  C3       D2  C3
⌞      ⌟    ⌞      ⌟     ⌞      ⌟

--> 輸入
SELECT X.A, B, Y.C, D
FROM Table1 AS X
JOIN Table2 AS Y
    ON Y.A = X.A
JOIN Table3 AS Z
    ON Z.C = Y.C

--> 結果
⌜              ⌝
 A   B   C   D  
 ――――――――――――――  
 A1  B1  C1  D1  
 A2  B2  C2  D2  
 A2  B2  C3  D3  
⌞              ⌟ 

POINT : 欄位較少的放左邊，較多的放右邊(雖然系統會自動轉換)，載入次數相對較少

// UNION : 就像剪刀膠水
SELECT ProductName FROM products WHERE ProductName LIKE 'A%'
UNION
SELECT ProductName FROM products WHERE ProductName LIKE 'B%'

// JOIN 加強!! 多個資料表
各客戶買了什麼東西(customers -> orders -> `order details` -> products)

SELECT CustomerID, CompanyName, OrderID FROM customers

SELECT c.CustomerID, CompanyName, OrderID
FROM customers AS c JOIN orders AS o
ON o.CustomerID = c.CustomerID

SELECT c.CustomerID, CompanyName, OrderID
FROM customers AS c JOIN orders AS o
ON o.CustomerID = c.CustomerID
ORDER BY c.CustomerID

SELECT c.CustomerID, CompanyName, o.OrderID, ProductID
FROM customers AS c JOIN orders AS o
ON o.CustomerID = c.CustomerID
JOIN `order details` AS od ON od.OrderID = o.OrderID
ORDER BY c.CustomerID

SELECT c.CustomerID, CompanyName, o.OrderID, od.ProductID, ProductName
FROM customers AS c JOIN orders AS o
ON o.CustomerID = c.CustomerID
JOIN `order details` AS od ON od.OrderID = o.OrderID
JOIN products AS p ON p.ProductID = od.ProductID
ORDER BY c.CustomerID

--> 加快速度 : 製作索引
CREATE index idx_CustomerID on customers (CustomerID)
CREATE index idx_OrderID on orders (OrderID)
CREATE index idx_ProductID on `order details` (ProductID)

// 子查詢
// 子查詢可以放在FROM裡面，但是要取別名
列出最後五張訂單資料
way1 : 從新到舊最上面五筆
SELECT * FROM orders ORDER BY OrderDate DESC LIMIT 5

way2 : 從舊到新最下面五筆
SELECT * FROM (SELECT * FROM orders ORDER BY OrderDate DESC LIMIT 5) AS T ORDER BY OrderDate
